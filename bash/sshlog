#!/usr/bin/env bash
#
# SSHlog v1.7
#
# Parses/filters system auth-logs for SSH access requests.
#
# Cats, greps and echoes accepted/failed ssh logins,
# and conditionally, sftp requests from
# '/var/log/auth*' log files.
#
# @author Kim Olsen <pizslacker@pizslacker.org>
#
# v0.9.x   - @lastchange 20120730-22:20-GMT+1
# v1.0.x   - @lastchange 20120814-01:11-GMT+1
# v1.2.x   - @lastchange 20120916-02:09-GMT+1
# v1.3.x   - @lastchange 20121008-10:04-GMT+1
# v1.4.x   - @lastchange 20130224-10:03-GMT+1
# v1.5.x   - @lastchange 20130226-18:01-GMT+1
# v1.6.x   - @lastchange 20130620-17:10-GMT+1
# v1.7.x   - @lastchange 20220808-13:41-GMT+1
#
# Program vars
MDATE="20220808-14:33-GMT+1";VER=1.7;REV=1;
# Temporary data-file.
SSHLOGFILE="/tmp/$(basename $0).$$.txt"
# ssh-logs directory.
SSHLOGDIR="ssh-logs"
# UID=0 run-time condition check.
if [ $(id -u) -eq 0 ]; then
# SSHlog parser-function.
    sshlog_parser() {
        if [ -z "$FILTER" ]; then
            opts
            infobanner
            exit 1;
        fi
        if [ ! -d ~/"$SSHLOGDIR" ]; then
            mkdir -p ~/"$SSHLOGDIR";
        fi
        echo "SSHlog v$VER" > "$SSHLOGFILE";
        echo >> "$SSHLOGFILE";
        # Output filtered sshlog results into data-file.
        cat "$AUTH_LOG" | grep ' sshd\[' | grep "$FILTER" >> "$SSHLOGFILE" && echo >> "$SSHLOGFILE";
        # Count number of logins (lines from auth-log output).
        # Assign type of count according to '$KEYWORD'.
        if [ "$FILTER" = "Accepted" ]; then
            echo $(cat "$AUTH_LOG" | grep "$FILTER" | wc -l)\
            $MSG $EXT_MSG >> "$SSHLOGFILE";
        elif [ "$FILTER" = "Failed" ]; then
            echo $(cat "$AUTH_LOG" | grep "$FILTER" | wc -l)\
            $MSG $EXT_MSG >> "$SSHLOGFILE";
        elif [ "$FILTER" = "Accepted publickey" ]; then
            echo $(cat "$AUTH_LOG" | grep "$FILTER" | wc -l)\
            $MSG $EXT_MSG >> "$SSHLOGFILE";
        elif [ "$FILTER" = "Accepted password" ]; then
            echo $(cat "$AUTH_LOG" | grep "$FILTER" | wc -l)\
            $MSG $EXT_MSG >> "$SSHLOGFILE";
        elif [ "$FILTER" = "Failed publickey" ]; then
            echo $(cat "$AUTH_LOG" | grep "$FILTER" | wc -l)\
            $MSG $EXT_MSG >> "$SSHLOGFILE";
        elif [ "$FILTER" = "Failed password" ]; then
            echo $(cat "$AUTH_LOG" | grep "$FILTER" | wc -l)\
            $MSG $EXT_MSG >> "$SSHLOGFILE";
        elif [ "$FILTER" = "Accepted keyboard-interactive/pam" ]; then
            echo $(cat "$AUTH_LOG" | grep "$FILTER" | wc -l)\
            $MSG $EXT_MSG >> "$SSHLOGFILE";
        fi
        echo >> "$SSHLOGFILE";
        # Append retreived SFTP request(s), if 'KEYWORD' is not 'Failed'.
        if [ $SFTP == true ]; then
            SFTP_CNT=$(cat "$AUTH_LOG" | grep "/usr/bin/sftp" | wc -l)
            if [ "$SFTP_CNT" != "0" ]; then
                cat "$AUTH_LOG" | grep 'subsystem request for sftp' >> "$SSHLOGFILE";
                # Count number of sftp-requests (lines from auth-log output).
                echo $SFTP_CNT" SFTP request(s) "$EXT_MSG >> "$SSHLOGFILE";
                echo >> "$SSHLOGFILE";
            else
                # Count number of sftp-requests (lines from auth-log output).
                echo "0 SFTP request(s) "$EXT_MSG >> "$SSHLOGFILE";
                echo >> "$SSHLOGFILE";
            fi
        fi

        if [ $TEXT == true ]; then
            if [ ! -d ~/"$SSHLOGDIR" ]; then
                {
                mkdir -p ~/"$SSHLOGDIR";
                if [ "$FILTER" = "Accepted" ]; then
                    {
                    cat "$SSHLOGFILE" > /tmp/sshlog-accepted-$(date +%Y%m%d).log;
                    mv /tmp/sshlog-accepted-$(date +%Y%m%d).log ~/ssh-logs/;
                    sudo chown $USER:$USER ~/ssh-logs/sshlog-accepted-$(date +%Y%m%d).log;
                    exit 0;
                    }
                elif [ "$FILTER" = "Failed password" ]; then
                    {
                    cat "$SSHLOGFILE" > /tmp/sshlog-failed-$(date +%Y%m%d).log;
                    mv /tmp/sshlog-failed-$(date +%Y%m%d).log ~/ssh-logs/;
                    sudo chown $USER:$USER ~/ssh-logs/sshlog-failed-$(date +%Y%m%d).log;
                    exit 0;
                    }
                fi
                }
            else
                {
                if [ "$FILTER" = "Accepted" ]; then
                    {
                    cat "$SSHLOGFILE" > /tmp/sshlog-accepted-$(date +%Y%m%d).log;
                    mv /tmp/sshlog-accepted-$(date +%Y%m%d).log ~/ssh-logs/;
                    sudo chown $USER:$USER ~/ssh-logs/sshlog-accepted-$(date +%Y%m%d).log;
                    exit 0;
                    }
                elif [ "$FILTER" = "Failed password" ]; then
                    {
                    cat "$SSHLOGFILE" > /tmp/sshlog-failed-$(date +%Y%m%d).log;
                    mv /tmp/sshlog-failed-$(date +%Y%m%d).log ~/ssh-logs/;
                    sudo chown $USER:$USER ~/ssh-logs/sshlog-failed-$(date +%Y%m%d).log;
                    exit 0;
                    }
                fi
                }
            fi
        fi
        # Use 'sshlog-viewer', if 'dialog' is installed,
        # else, sshlog will revert to using 'less'.
        #
        if [ -x dialog ]; then
            if [ -x sshlogviewer ]; then
                clear && sshlogviewer "$SSHLOGFILE";
            fi
        else
            clear && less "$SSHLOGFILE";
        fi
        rm -f "$SSHLOGFILE" 2>&1 && exit 0;
    }
    opts() { echo "Too few arguments given." 1>&2;}
    infobanner() {
        echo
        echo "SSHlog v"$VER
        echo
        echo "Usage: sshlog [-a|-f|-v] [-t] [key|pass] [sftp] [old]"
        echo
        echo "Options:"
        echo "-a        - display accepted login(s)."
        echo "-f        - display failed login attempt(s)."
        echo "-v        - display detailed version-info."
        echo "-t        - pipe results to textfile in 'ssh-logs' dir."
        echo
        echo "Filter-arguments:"
        echo "-key       - filter logins by publickey authentication."
        echo "-pam       - filter logins by PAM authentication."
        echo "-pass      - filter logins by password authentication."
        echo
        echo "Supplemental arguments:"
        echo "-sftp      - display SFTP request(s)."
        echo "-old       - display results from 7 days ago."
        echo
        echo "Use 'PgUp' and 'PgDn' keys to navigate results."
        echo
        echo "You must supply an option to execute sshlog."
        echo
        exit 1
    }
    # Force-set 'AUTH_LOG', if unset.
    if [ ! $AUTH_LOG ]; then
        AUTH_LOG=/var/log/auth.log;
    fi
    # `Getopts` loop -> get options from command line
    while getopts ":aftvoldkeypampasssftphtlphv\?" opt; do
        case "${opt}" in
            a)  # Display accepted logins
                FILTER='Accepted'
                MSG="accepted login(s) "
                EXT_MSG="this week"
                ;;
            f)  # Display failed logins
                FILTER='Failed'
                MSG="failed login attempt(s) "
                EXT_MSG="this week"
                ;;
            t)  # Pipe text output into logfile
                TEXT=true;
                ;;
            key) # Display publickey logins
                FILTER="${FILTER} publickey"
                MSG="accepted publickey login(s) "
                EXT_MSG="this week"
                ;;

            pam) # Display keyboard-interactive/pam logins
                FILTER="${FILTER} keyboard-interactive/pam"
                MSG="accepted pam-login(s) "
                EXT_MSG="this week"
                ;;
            pass) # Display password logins
                FILTER="${FILTER} password"
                MSG="accepted password login(s) "
                EXT_MSG="this week"
                ;;
            old) # Display logins from two weeks ago
                AUTH_LOG="/var/log/auth.log.1"
                EXT_MSG="last week"
                ;;
            sftp) # Display SFTP access attempts
                SFTP=true;
                ;;
            help)
                infobanner
                ;;
            h)
                infobanner
                ;;
            v)
                infobanner
                ;;
            \?)
                infobanner
                ;;
            *)
                opts
                infobanner
                ;;
        esac
    done
    shift $((OPTIND -1))
    if [ ! -z "${FILTER}" ]; then
        sshlog_parser
    else
       opts
       infobanner
    fi
else
    echo;
    echo "You need root/sudo to execute sshlog properly!";
    echo;
    exit 1;
fi

